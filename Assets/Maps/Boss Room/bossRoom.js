const canvas = document.querySelector('canvas')
const ctx = canvas.getContext('2d')

canvas.width = window.innerWidth
canvas.height = window.innerHeight

const ground = new Image ();
ground.src = '../../tileSets/Cave.png'
ground.onload = draw;

const layer2 = new Image ();
layer2.src = '../../tileSets/lava tileset.png'
layer2.onload = draw;


const boss = new Image();
boss.src = "../../enemies/BossImg.png"

const warr = new Image ();
warr.src = "../../../images/warrior back.png"

const tileSize = 32;
const tileOutputSize = .89;
const updatedTileSize = tileSize * tileOutputSize;

const tileCol = 16;
const tileRow = 16;

const mapCols = 32;
const mapRows = 32;

const mapHeight = mapRows * tileSize;
const mapWidth = mapCols * tileSize;

const layerTwoMap = [
  425,426,427,425,303,303,303,426,427,303,303,303,425,426,427,303,303,303,425,426,427,303,303,303,425,303,303,303,303,427,425,426,
  437,438,439,437,303,303,303,438,439,303,303,303,437,438,439,303,303,303,437,438,439,303,303,303,437,303,303,303,303,439,437,438,
  425,426,427,425,303,303,303,0,427,303,303,303,425,426,427,303,303,303,425,426,427,303,303,303,425,303,303,303,303,427,425,426,
  437,438,318,329,329,306,329,0,330,329,303,306,317,329,306,329,306,306,319,329,306,329,306,329,353,293,294,303,295,0,437,438,
  425,426,318,318,318,318,272,354,343,354,343,3221225741,330,318,341,354,343,354,341,354,306,354,343,3221225741,318,318,305,306,307,0,425,426,
  437,438,318,318,318,318,1073742095,307,330,318,353,393,363,363,363,363,363,363,363,331,270,271,343,307,330,343,318,318,318,0,437,438,
  425,426,318,318,305,1073742082,1073742083,317,318,319,318,303,363,303,303,303,303,303,303,294,330,331,329,464,319,331,329,353,353,0,425,426,
  437,438,353,318,305,258,259,330,354,331,303,303,363,317,318,318,318,393,393,363,303,329,317,464,464,329,306,307,331,0,437,438,
  425,426,329,305,269,270,271,329,317,329,303,303,330,317,319,319,331,329,330,330,303,393,319,319,319,353,330,355,353,0,425,426,
  437,438,353,319,281,282,283,318,318,318,303,318,330,319,319,319,318,318,318,319,303,393,331,318,306,331,317,317,331,0,437,438,
  425,426,329,319,293,294,295,330,318,318,303,318,331,318,318,330,318,318,318,318,303,393,318,318,318,317,330,330,287,0,425,426,
  437,438,330,329,331,329,331,319,318,318,303,303,317,331,330,329,318,318,318,363,303,393,318,318,318,305,305,299,299,0,437,438,
  425,426,319,305,307,331,354,306,341,307,303,303,294,329,330,307,331,329,294,303,303,319,281,282,283,318,318,305,305,0,425,426,
  437,438,317,464,464,329,319,343,319,319,303,303,303,303,318,355,363,294,294,303,303,307,293,294,295,318,318,342,342,0,437,438,
  425,426,319,319,319,353,330,329,329,330,303,331,306,303,303,303,303,303,342,318,303,317,319,319,319,318,305,305,341,0,425,426,
  437,438,331,318,306,331,331,317,317,342,303,331,354,393,393,393,353,317,319,330,303,343,343,319,318,318,342,355,331,0,437,438,
  425,426,416,417,418,416,417,418,416,417,,416,417,416,417,416,417,416,417,418,,417,418,416,417,418,416,417,418,0,425,426,
  437,438,428,429,430,428,429,430,428,429,303,428,429,428,429,428,429,428,429,430,303,429,430,428,429,430,428,429,430,0,437,438,
  425,426,440,441,442,440,441,442,440,441,303,440,441,440,441,440,441,440,441,442,303,441,442,440,441,442,440,441,442,0,425,426,
  437,438,405,405,393,393,405,393,393,284,303,286,405,405,393,405,405,393,393,284,303,286,405,393,405,405,393,405,405,0,437,438,
  425,426,393,393,405,393,405,393,405,296,297,298,393,405,393,393,393,393,405,296,303,298,393,393,405,405,405,393,393,422,425,426,
  437,438,405,405,393,405,393,393,405,393,393,405,393,405,393,393,393,393,405,393,405,393,393,393,393,393,393,405,405,410,437,438,
  425,426,405,405,393,393,405,393,405,405,405,393,405,408,409,0,0,0,0,408,409,0,393,393,393,393,405,405,405,422,425,426,
  437,438,393,393,393,393,405,405,393,405,393,408,409,420,421,0,0,0,0,420,421,408,409,393,393,405,393,405,405,410,437,438,
  425,426,405,405,393,405,405,405,393,393,0,420,421,0,0,0,0,0,0,0,0,420,421,0,405,405,405,405,405,422,425,426,
  437,438,393,405,393,405,405,393,393,408,409,0,0,0,0,0,0,0,0,0,0,0,408,409,393,405,405,393,405,410,437,438,
  425,426,405,393,405,405,405,393,393,420,421,0,0,0,0,0,0,0,0,0,0,0,420,421,0,393,405,405,405,422,425,426,
  437,438,405,393,393,393,393,405,408,409,0,0,0,0,0,0,0,0,0,0,0,0,0,408,409,393,405,393,393,410,437,438,
  425,426,405,393,393,405,405,393,420,421,0,0,0,0,0,0,0,0,0,0,0,0,0,420,421,0,405,405,393,422,425,426,
  437,438,393,405,393,405,405,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,393,405,0,437,438,
  425,426,426,426,426,426,426,0,426,0,426,426,0,0,0,0,0,0,0,0,0,426,426,426,0,0,426,426,426,426,426,426,
  437,438,426,426,426,426,426,426,426,426,426,426,426,438,0,0,0,0,0,426,426,426,426,426,426,426,426,426,426,426,426,438
  ]
const layerOneMap = [
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,61,61,61,61,61,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,61,61,61,61,61,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146
  ]

let mapIndex = 0;
let sourceX = 0;
let sourceY = 0;

function draw () {
  
  let mapIndex = 0;

  for (let col = 0; col < mapHeight; col += tileSize) {
     for (let row = 0; row < mapWidth; row += tileSize) {
       let tileVal = layerOneMap[mapIndex];
       if (tileVal != 0) {
         tileVal -= 1;
         sourceY = Math.floor(tileVal / tileCol) * tileSize;
         sourceX = (tileVal % tileCol) * tileSize;
         ctx.drawImage(ground, sourceX, sourceY, tileSize, tileSize, row * tileOutputSize, col * tileOutputSize, updatedTileSize, updatedTileSize);

         tileVal = layerTwoMap[mapIndex];
         if(tileVal !=0) {
         tileVal -= 1;
         sourceY = Math.floor(tileVal/tileCol) * tileSize;
         sourceX = (tileVal % tileCol) * tileSize;
         ctx.drawImage(layer2, sourceX, sourceY, tileSize, tileSize, row * tileOutputSize, col * tileOutputSize, updatedTileSize, updatedTileSize);

        }

         if (currentPos === mapIndex) {
          newWarrior.x = (row * tileOutputSize) - 16
          newWarrior.y = (col - 1.8* tileSize) * tileOutputSize
          newWarrior.draw();
      }
         mapIndex ++;
      }
        ctx.drawImage(boss, 400,200,150,150)
}
}
}


// DRAWING AND ANIMATING THE CHARACTER

class Character {
  constructor(name, img, strength, health, x, y, sx, sy) {
    this.img = img;
    this.name = name,
      this.strength = strength,
      this.health = health,
      this.x = x,
      this.y = y,
      this.sx = sx,
      this.sy = sy
  }

  draw = () => {
    ctx.drawImage(this.img, this.sx, this.sy, 50, 65, this.x, this.y, canvas.width / 38, canvas.height / 20);
  }
}

let defaultPos = 1007 ;


let currentPos = defaultPos;

//  warrior image
let character = new Image();
character.src = "../../../images/warrior back.png";
let characterDown = new Image();
characterDown.src = "../../../images/warrior_down.png"
let characterLeft = new Image();
characterLeft.src = "../../../images/warrior_left.png"
let characterRight = new Image();
characterRight.src = "../../../images/warrior.png"


// INSTANCES OF CLASSES
let newWarrior = new Character('Warrior', character, 0, 0, ((defaultPos / 32) % tileSize) * 32, defaultPos / 32 * tileSize, 0, 0);


function animate() {
  requestAnimationFrame(animate);
ctx.clearRect(0, 0, canvas.width, canvas.height)

  draw();
  }

window.onload = animate;

window.onkeydown = function (e) {

  // MOVEMENT OF THE MAIN CHARACTER
  if (e.key === "ArrowLeft") {
    if (layerOneMap[currentPos - 1] === 61) {
      newWarrior.img = characterLeft;
      currentPos -= 1;
  
     }
     console.log(layerOneMap[currentPos + 1])
  }
  if (e.key === "ArrowRight") {
    if (layerOneMap[currentPos + 1] === 61) {
      newWarrior.img = characterRight;
      //newWarrior.x += 16;
      currentPos += 1;
      
     }
     console.log(layerOneMap[currentPos - 1])
  }
  if (e.key === "ArrowUp") {
    if (layerOneMap[currentPos - 32] === 61) {
      newWarrior.img = character;
      currentPos -= 32;
      
     }
     console.log(layerOneMap[currentPos + 32])
  }
  if (e.key === "ArrowDown") {
    if (layerOneMap[currentPos + 32] === 61) {
      newWarrior.img = characterDown;
      currentPos += 32;
     }
    
  }
  if (currentPos >= 483 + 32 && currentPos <= 508 + 32 ){
    window.location.replace("../../../battle/battle3.html");
   }
};